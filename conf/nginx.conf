#user  nobody;
worker_processes  auto;
#pid  logs/nginx.pid;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

events {
    worker_connections  768;
}

http {

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include       nginx.mime.types.conf;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    # Enable serve statically compressed files
    brotli_static on;
    gzip_static  on;

    # Add a Vary: Accept-Encoding header
    gzip_vary on;

    # Expires map
    map $sent_http_content_type $expires {
        default                    off;
        text/html                  max;
        text/css                   1M; # 1 month
        application/javascript     1M;
        application/font-woff      max;
        font/woff2                 max;
        ~image/                    max;
    }

    # Fix nginx sending its version number in error pages and Server header
    server_tokens off;

    # No iframes
    add_header X-Frame-Options SAMEORIGIN;

    # We'll supply correct content types, don't let browsers guess
    add_header X-Content-Type-Options nosniff;

    # Redirect non-HTTPs clients to HTTPS permanently
    # See http://nginx.org/en/docs/http/converting_rewrite_rules.html
    server {
        listen localhost:80;
        listen [::]:80;
        server_name localhost;
        include nginx.https.conf;
        return 301 https://localhost$request_uri;
    }

    # Single HTTPS point all browsers will talk to
    server {
        listen localhost:443 ssl http2;
        listen [::]:443 ssl http2;
        server_name localhost;
        expires $expires;
        include nginx.https.conf;


        root MY_PATH;
        index index.html;

        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to displaying a /index.html.
            try_files $uri /index.html;
        }
    }
}
