stages:
  - test
  - build
  - deploy

.task: &task
  tags:
    - ci.inria.fr # required to run on shared gitlab.inria.fr runners

.images: &images
  variables:
    TAG: latest
    MUTE_IMAGE: registry.gitlab.inria.fr/coast-team/mute/mute:${TAG}
    SIGVER_IMAGE: registry.gitlab.inria.fr/coast-team/mute/mute/sigver:${TAG}

.docker_registry_access: &docker_registry_access
  before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY_IMAGE}
  after_script:
    - docker logout ${CI_REGISTRY_IMAGE}

.docker_deployment: &docker_deployment
  script:
    - docker-compose -f ${COMPOSE_FILE} --env-file ${COMPOSE_ENV_FILE:-""} down || true
    - docker-compose pull --include-deps mute
    - docker-compose -f ${COMPOSE_FILE} --env-file ${COMPOSE_ENV_FILE:-""} up -d

###
## Test
#

.e2e:
  image: docker.io/docker:dind
  stage: test
  except:
    - schedules
  variables:
    DOCKERFILE_PATH: src/e2e/Dockerfile
    BUILD_IMAGE: 'docker build -f $DOCKERFILE_PATH -t $IMAGE --no-cache .'
    RUN_CI_CONTAINER: 'docker run --privileged -d --name $CONTAINER $IMAGE'
    RUN_MUTE_SIGVER: 'docker exec -w /app/mute $CONTAINER /bin/sh start-mute-sigver-containers.sh'
    STOP_CI_CONTAINER: 'docker stop $CONTAINER'
    RUN_TEST: 'docker exec -w /app/ci $CONTAINER npm run test chromium firefox $SCENARIO true'
  before_script:
    - $BUILD_IMAGE
    - $RUN_CI_CONTAINER
    - sleep 10
    - $RUN_MUTE_SIGVER
  script:
    - $RUN_TEST
  <<: *task

e2e full scenario: # whole E2E scenario
  extends: .e2e
  variables:
    IMAGE: ci-full-scenario
    CONTAINER: ci-full-scenario-container
    SCENARIO: fullscenario
  after_script:
    - $STOP_CI_CONTAINER
  when: manual

e2e online scenario: # two users meet up on the same document and modify its content
  extends: .e2e
  variables: 
    IMAGE: ci-online-scenario
    CONTAINER: ci-online-scenario-container
    SCENARIO: online
  after_script:
    - $STOP_CI_CONTAINER

e2e offline scenario: # two previously met users are disconnected from the signaling server but can still both modify the document
  extends: .e2e
  variables:
    IMAGE: ci-offline-scenario
    CONTAINER: ci-offline-scenario-container
    SCENARIO: offline
  after_script:
    - $STOP_CI_CONTAINER

e2e offline-to-online scenario: # the document at the end is a merge of their respective modifications
  extends: .e2e
  variables:
    IMAGE: ci-offline-to-online-scenario
    CONTAINER: ci-offline-to-online-scenario-container
    SCENARIO: offline-to-online
  retry: 2

###
## Build
#

build application:
  stage: build
  image: docker.io/node:14-alpine
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
  script:
    - npm ci .npm --prefer-offline
    - npm run build
  artifacts:
    paths:
      - "dist"
  when: manual
  <<: *task

build docker image:
  image: docker.io/docker:dind # needs > 19.03
  stage: build
  <<: [ *docker_registry_access, *task, *images ]
  only:
    - main
  #  - tags
  #variables:
  #  TAG: ${CI_COMMIT_TAG:-latest}
  script:
    - docker-compose build
    - docker push "${MUTE_IMAGE}"
    - docker push "${SIGVER_IMAGE}"

###
## Deployment
#

deploy to production:
  image: docker.io/docker:dind # needs > 19.03
  stage: deploy
  <<: [ *docker_registry_access, *docker_deployment ]
  variables:
    COMPOSE_FILE: docker-compose.yml
    COMPOSE_ENV_FILE: conf/gitlab-ci/production.env
    #TAG: ${CI_COMMIT_TAG:-latest}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_DEPLOY_FREEZE == null
      when: on_success
  needs:
    - job: build docker image
  environment:
    name: production
    url: https://mutehost.loria.fr
  tags:
    - mutehost # nécessite un runner gitlab ci en mode shell sur la machine de déploiement